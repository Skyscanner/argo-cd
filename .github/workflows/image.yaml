name: Image

on:
  push:
    branches:
      # We use skyscanner-internal/master as the base branch for integration
      # This branch contains our CI changes and is not meant for direct contributions.
      # Our internal development is to be merged into here.
      # The changes that are ready for contribution should be cherry-picked to skyscanner-contrib/master.
      - skyscanner-internal/master
      # Branches to be used for development and testing. They should be based on skyscanner-internal/master.
      - skyscanner-internal/develop/**
  pull_request:
    branches:
      - skyscanner-internal/master
      # Cleaned up, ready for contribution PRs are to be cherry-picked here
      - skyscanner-contrib/master
    types: [labeled, unlabeled, opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  set-vars:
    permissions:
      contents: read
    if: github.repository == 'Skyscanner/argo-cd'
    runs-on: ubuntu-22.04
    outputs:
      image-tag: ${{ steps.image.outputs.tag}}
      platforms: ${{ steps.platforms.outputs.platforms }}
    steps:
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0

      - name: Set image tag for ghcr
        run: |
          # Get the branch name
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          # Sanitize branch name for container registry compliance
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed -e 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          # Set the image tag with sanitized branch name
          echo "tag=$(cat ./VERSION)-${SANITIZED_BRANCH}-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        id: image

      - name: Determine image platforms to use
        id: platforms
        run: |
          IMAGE_PLATFORMS=linux/amd64
          if [[ "${{ github.event_name }}" == "push" || "${{ contains(github.event.pull_request.labels.*.name, 'test-multi-image') }}" == "true" ]]
          then
            IMAGE_PLATFORMS=linux/amd64,linux/arm64
          fi
          echo "Building image for platforms: $IMAGE_PLATFORMS"
          echo "platforms=$IMAGE_PLATFORMS" >> $GITHUB_OUTPUT

  build-only:
    needs: [set-vars]
    permissions:
      contents: read
      packages: write # for pushing packages to GHCR, which is used by cd.apps.argoproj.io to avoid polluting Quay with tags
      id-token: write # for creating OIDC tokens for signing.
    if: ${{ github.repository == 'Skyscanner/argo-cd' && github.event_name != 'push' }}
    uses: ./.github/workflows/image-reuse.yaml
    with:
      # Note: cannot use env variables to set go-version (https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations)
      # renovate: datasource=golang-version packageName=golang
      go-version: 1.24.3
      platforms: ${{ needs.set-vars.outputs.platforms }}
      push: false

  build-and-publish:
    needs: [set-vars]
    permissions:
      contents: read
      packages: write # for pushing packages to GHCR, which is used by cd.apps.argoproj.io to avoid polluting Quay with tags
      id-token: write # for creating OIDC tokens for signing.
    if: ${{ github.repository == 'Skyscanner/argo-cd' && github.event_name == 'push' }}
    uses: ./.github/workflows/image-reuse.yaml
    with:
      # quay_image_name: quay.io/argoproj/argocd:latest
      ghcr_image_name: ghcr.io/skyscanner/argocd:${{ needs.set-vars.outputs.image-tag }}
      # Note: cannot use env variables to set go-version (https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations)
      # renovate: datasource=golang-version packageName=golang
      go-version: 1.24.3
      platforms: ${{ needs.set-vars.outputs.platforms }}
      push: true
    secrets:
      #quay_username: ${{ secrets.RELEASE_QUAY_USERNAME }}
      #quay_password: ${{ secrets.RELEASE_QUAY_TOKEN }}
      ghcr_username: ${{ github.actor }}
      ghcr_password: ${{ secrets.GITHUB_TOKEN }}

  # TODO: Needs allowlisting
  # build-and-publish-provenance: # Push attestations to GHCR, latest image is polluting quay.io
  #   needs:
  #     - build-and-publish
  #   permissions:
  #     actions: read # for detecting the Github Actions environment.
  #     id-token: write # for creating OIDC tokens for signing.
  #     packages: write # for uploading attestations. (https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md#known-issues)
  #   if: ${{ github.repository == 'Skyscanner/argo-cd' && github.event_name == 'push' }}
  #   # Must be refernced by a tag. https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md#referencing-the-slsa-generator
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
  #   with:
  #     image: ghcr.io/argoproj/argo-cd/argocd
  #     digest: ${{ needs.build-and-publish.outputs.image-digest }}
  #     registry-username: ${{ github.actor }}
  #   secrets:
  #     registry-password: ${{ secrets.GITHUB_TOKEN }}

  # TODO: We would need to fork this repo as well and repoint it to our argocd-deployments repo.
  # Do we want this?
  # Deploy:
  #   needs:
  #     - build-and-publish
  #     - set-vars
  #   permissions:
  #     contents: write # for git to push upgrade commit if not already deployed
  #     packages: write # for pushing packages to GHCR, which is used by cd.apps.argoproj.io to avoid polluting Quay with tags
  #   if: ${{ github.repository == 'Skyscanner/argo-cd' && github.event_name == 'push' }}
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
  #     - run: git clone "https://$TOKEN@github.com/argoproj/argoproj-deployments"
  #       env:
  #         TOKEN: ${{ secrets.TOKEN }}
  #     - run: |
  #         docker run -u $(id -u):$(id -g) -v $(pwd):/src -w /src --rm -t ghcr.io/argoproj/argo-cd/argocd:${{ needs.set-vars.outputs.image-tag }} kustomize edit set image quay.io/argoproj/argocd=ghcr.io/argoproj/argo-cd/argocd:${{ needs.set-vars.outputs.image-tag }}
  #         git config --global user.email 'ci@argoproj.com'
  #         git config --global user.name 'CI'
  #         git diff --exit-code && echo 'Already deployed' || (git commit -am 'Upgrade argocd to ${{ needs.set-vars.outputs.image-tag }}' && git push)
  #       working-directory: argoproj-deployments/argocd
